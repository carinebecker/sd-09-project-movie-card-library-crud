{"version":3,"sources":["components/MovieCard.js","services/movieData.js","services/movieAPI.js","components/Loading.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","this","props","movie","id","title","storyline","imagePath","data-testid","src","alt","to","React","Component","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","Loading","MovieList","state","loading","then","setState","previousState","map","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","type","className","value","onChange","event","updateMovie","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","handleDelete","params","match","movieAPI","filter","status","NewMovie","shouldRedirect","newMovie","movieData","nextId","length","EditMovie","updatedMovie","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4b25529.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie: { id, title, storyline, imagePath } } = this.props;\n    return (\n      <div data-testid=\"movie-card\">\n        Movie Card\n        <h4>{ title }</h4>\n        <h5>{ storyline }</h5>\n        <img src={ imagePath } alt=\"banner do filme\" />\n        <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\n\nimport * as movieAPI from '../services/movieAPI';\nimport Loading from '../components/Loading';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  async componentDidMount() {\n    return movieAPI.getMovies()\n      .then((response) => this\n        .setState((previousState) => ({\n          ...previousState,\n          movies: response,\n          loading: false,\n        })));\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    if (loading) {\n      return <Loading />;\n    }\n    return (\n      <div data-testid=\"movie-list\">\n        {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    genre: PropTypes.string,\n    rating: PropTypes.number,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n    this.handleDelete = this.handleDelete.bind(this);\n    this.state = {\n      movie: {},\n      loading: true,\n    };\n  }\n\n  async componentDidMount() {\n    const { match: { params } } = this.props;\n    const { id } = params;\n    return movieAPI.getMovie(id)\n      .then((response) => this\n        .setState((previousState) => ({\n          ...previousState,\n          loading: false,\n          movie: response,\n        })));\n  }\n\n  handleDelete(id) {\n    return movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    const { movie, loading } = this.state;\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = movie;\n    if (loading) {\n      return <Loading />;\n    }\n    return (\n      <div data-testid=\"movie-details\">\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <p>{ `Title: ${title}` }</p>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n        <Link to=\"../\">VOLTAR</Link>\n        <Link to=\"/\" onClick={ () => this.handleDelete(id) }>DELETAR</Link>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    this.setState({\n      shouldRedirect: true,\n    });\n    return movieAPI.createMovie(newMovie);\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    return movieAPI.getMovie(id)\n      .then((response) => this\n        .setState((previousState) => ({\n          ...previousState,\n          status: '',\n          movie: response,\n        })));\n  }\n\n  handleSubmit(updatedMovie) {\n    this.setState((previousState) => ({\n      ...previousState,\n      shouldRedirect: true,\n    }));\n    return movieAPI.updateMovie(updatedMovie);\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n    if (status === 'loading') {\n      return <Loading />;\n    }\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>Movie Card Library CRUD</div>\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"/movies/new\" component={ NewMovie } />\n        <Route path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route path=\"/movies/:id\" component={ MovieDetails } />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}